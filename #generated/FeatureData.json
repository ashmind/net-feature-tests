[
  {
    "name": "Autofac",
    "url": "http://autofac.org/",
    "version": "3.0.0.0",
    "supports": [
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "win",
      "wp80",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "success"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "success"
      },
      "IReadOnlyList": {
        "result": "success"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "success"
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "success"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "success"
      },
      "NotCreatingLazyPrematurely": {
        "result": "success"
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "success"
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "success"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "success"
      },
      "ReasonableConstructorSelection": {
        "result": "success"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: Autofac fails list recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnListRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 106\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandlingForListDependency(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 81"
      }
    }
  },
  {
    "name": "Castle",
    "url": "http://docs.castleproject.org/Windsor.MainPage.ashx",
    "version": "3.2.0.0",
    "supports": [
      "net35",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "success"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "Castle.MicroKernel.Resolvers.DependencyResolverException: Missing dependency.\r\nComponent DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]] has a dependency on System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService], which could not be resolved.\r\nMake sure the dependency is correctly registered in the container as a service, or provided as inline argument. ---> Castle.MicroKernel.Handlers.HandlerException: Handler for System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService] was not found.\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.TryGetHandlerFromKernel(DependencyModel dependency, CreationContext context)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)\r\n   --- End of inner exception stack trace ---\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveCore(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)\r\n   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.Instantiate(CreationContext context)\r\n   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)\r\n   at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)\r\n   at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)\r\n   at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)\r\n   at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden& burden)\r\n   at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)\r\n   at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)\r\n   at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)\r\n   at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)\r\n   at Castle.MicroKernel.DefaultKernel.Resolve(Type service, IDictionary arguments)\r\n   at Castle.Windsor.WindsorContainer.Resolve(Type service)\r\n   at DependencyInjection.FeatureTests.Adapters.CastleAdapter.Resolve(Type serviceType) in [removed]\\CastleAdapter.cs:line 47\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "Castle.MicroKernel.Resolvers.DependencyResolverException: Missing dependency.\r\nComponent DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]] has a dependency on System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService], which could not be resolved.\r\nMake sure the dependency is correctly registered in the container as a service, or provided as inline argument. ---> Castle.MicroKernel.Handlers.HandlerException: Handler for System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService] was not found.\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.TryGetHandlerFromKernel(DependencyModel dependency, CreationContext context)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)\r\n   --- End of inner exception stack trace ---\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernelByType(CreationContext context, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveFromKernel(CreationContext context, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.ResolveCore(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.Resolvers.DefaultDependencyResolver.Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)\r\n   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.CreateConstructorArguments(ConstructorCandidate constructor, CreationContext context)\r\n   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.Instantiate(CreationContext context)\r\n   at Castle.MicroKernel.ComponentActivator.DefaultComponentActivator.InternalCreate(CreationContext context)\r\n   at Castle.MicroKernel.ComponentActivator.AbstractComponentActivator.Create(CreationContext context, Burden burden)\r\n   at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.CreateInstance(CreationContext context, Boolean trackedExternally)\r\n   at Castle.MicroKernel.Lifestyle.AbstractLifestyleManager.Resolve(CreationContext context, IReleasePolicy releasePolicy)\r\n   at Castle.MicroKernel.Handlers.DefaultHandler.ResolveCore(CreationContext context, Boolean requiresDecommission, Boolean instanceRequired, Burden& burden)\r\n   at Castle.MicroKernel.Handlers.DefaultHandler.Resolve(CreationContext context, Boolean instanceRequired)\r\n   at Castle.MicroKernel.Handlers.AbstractHandler.Resolve(CreationContext context)\r\n   at Castle.MicroKernel.DefaultKernel.ResolveComponent(IHandler handler, Type service, IDictionary additionalArguments, IReleasePolicy policy)\r\n   at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)\r\n   at Castle.MicroKernel.DefaultKernel.Resolve(Type service, IDictionary arguments)\r\n   at Castle.Windsor.WindsorContainer.Resolve(Type service)\r\n   at DependencyInjection.FeatureTests.Adapters.CastleAdapter.Resolve(Type serviceType) in [removed]\\CastleAdapter.cs:line 47\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "success"
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "success"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "Castle.MicroKernel.ComponentNotFoundException: No component for supporting the service System.Lazy`1[[DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] was found\r\n   at Castle.MicroKernel.DefaultKernel.Castle.MicroKernel.IKernelInternal.Resolve(Type service, IDictionary arguments, IReleasePolicy policy)\r\n   at Castle.MicroKernel.DefaultKernel.Resolve(Type service, IDictionary arguments)\r\n   at Castle.Windsor.WindsorContainer.Resolve(Type service)\r\n   at DependencyInjection.FeatureTests.Adapters.CastleAdapter.Resolve(Type serviceType) in [removed]\\CastleAdapter.cs:line 47\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "success"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "success"
      },
      "ReasonableConstructorSelection": {
        "result": "success"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "Catel",
    "url": "http://www.catelproject.com/",
    "version": "3.7.0.0",
    "supports": [
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "win",
      "wp71",
      "wp80",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 82\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 82\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 82\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 82\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 82\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 82\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "failure",
        "error": "System.NotSupportedException: The type 'DependencyInjection.FeatureTests.TestTypes.IGenericService`1[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' is not registered, not even in an external container\r\n   at Catel.IoC.ServiceLocator.ResolveType(Type serviceType, Object tag)\r\n   at DependencyInjection.FeatureTests.Adapters.CatelAdapter.Resolve(Type serviceType) in [removed]\\CatelAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.GenericTests.OpenGenericTypes(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 22"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 31"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.MissingMemberException: The lazily-initialized type does not have a public, parameterless constructor.\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 31"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependency(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 33"
      },
      "PropertyDependencyIsOptional": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "ReasonableConstructorSelection": {
        "result": "success"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "Dynamo.Ioc",
    "url": "http://martinf.github.io/Dynamo-IoC",
    "version": "3.0.2.0",
    "supports": [
      "net40",
      "net40-Client",
      "net45",
      "net451"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "failure",
        "error": "System.ArgumentException: Type: IGenericService`1 is not assignable from implementation type: GenericService`1\r\n   at Dynamo.Ioc.IocContainer.Register(Type type, Type implType, Object key, ILifetime lifetime, Nullable`1 compileMode, Boolean includeInternalCtor, Func`2 selector)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\DynamoIocAdapter.cs:line 24\r\n   at DependencyInjection.FeatureTests.GenericTests.OpenGenericTypes(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 21"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependency(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 33"
      },
      "PropertyDependencyIsOptional": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Dynamo.Ioc.Index.DirectIndex.Get(Type type)\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at lambda_method(Closure , IResolver )\r\n   at Dynamo.Ioc.ExpressionRegistration`1.CreateInstance()\r\n   at Dynamo.Ioc.TransientLifetime.GetInstance(IInstanceFactoryRegistration registration)\r\n   at Dynamo.Ioc.ExpressionRegistration`1.GetInstance()\r\n   at Dynamo.Ioc.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.DynamoIocAdapter.Resolve(Type serviceType) in [removed]\\DynamoIocAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 33"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: Dynamo.Ioc fails recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 116\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandling(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 69"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "Grace",
    "url": "https://grace.codeplex.com/",
    "version": "1.0.0.0",
    "supports": [
      "net45",
      "net451",
      "win",
      "wp80"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "success"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "success"
      },
      "IReadOnlyList": {
        "result": "success"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "success"
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "success"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "success"
      },
      "NotCreatingLazyPrematurely": {
        "result": "success"
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "success"
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "success"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "success"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "System.ArgumentException: The type 'System.SByte*' may not be used as a type argument.\r\n   at System.RuntimeType.ThrowIfTypeNeverValidGenericArgument(RuntimeType type)\r\n   at System.RuntimeType.SanityCheckGenericArguments(RuntimeType[] genericArguments, RuntimeType[] genericParamters)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   at Grace.DependencyInjection.Impl.CompiledExport.BaseCompiledExportDelegate.ImportForRootScope(Type importType, IInjectionTargetInfo targetInfo, String exportName, ParameterExpression importVariable)\r\n   at Grace.DependencyInjection.Impl.CompiledExport.BaseCompiledExportDelegate.CreateImportExpression(Type importType, IInjectionTargetInfo targetInfo, String exportName, String variableName, Boolean isRequired, IExportValueProvider valueProvider, ExportStrategyFilter exportStrategyFilter)\r\n   at Grace.DependencyInjection.Impl.CompiledExport.InstanceCompiledExportDelegate.CreateInstantiationExpression()\r\n   at Grace.DependencyInjection.Impl.CompiledExport.BaseCompiledExportDelegate.GenerateDelegate()\r\n   at Grace.DependencyInjection.Impl.CompiledExport.BaseCompiledExportDelegate.CompileDelegate()\r\n   at Grace.DependencyInjection.Impl.CompiledInstanceExportStrategy.Initialize()\r\n   at Grace.DependencyInjection.Impl.AttributeExportStrategy.Initialize()\r\n   at Grace.DependencyInjection.Impl.InjectionKernel.AddStrategy(IExportStrategy addStrategy)\r\n   at Grace.DependencyInjection.Impl.InjectionKernel.ResolveUnknownExport(Type resolveType, String resolveName, IInjectionContext injectionContext, ExportStrategyFilter consider)\r\n   at Grace.DependencyInjection.Impl.InjectionKernel.Locate[T](IInjectionContext injectionContext, ExportStrategyFilter consider)\r\n   at lambda_method(Closure , IInjectionScope , IInjectionContext )\r\n   at Grace.DependencyInjection.Impl.CompiledExportStrategy.Activate(IInjectionScope exportInjectionScope, IInjectionContext context, ExportStrategyFilter consider)\r\n   at Grace.DependencyInjection.Impl.ExportStrategyCollection.Activate(String exportName, Type exportType, IInjectionContext injectionContext, ExportStrategyFilter filter)\r\n   at Grace.DependencyInjection.Impl.InjectionKernel.Locate(Type objectType, IInjectionContext injectionContext, ExportStrategyFilter consider)\r\n   at Grace.DependencyInjection.DependencyInjectionContainer.Locate(Type objectType, IInjectionContext injectionContext, ExportStrategyFilter consider)\r\n   at DependencyInjection.FeatureTests.Adapters.GraceAdapter.Resolve(Type serviceType) in [removed]\\GraceAdapter.cs:line 30\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 33"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "HaveBox",
    "url": "http://www.havebox.net/",
    "version": "1.6.0.0",
    "supports": [
      "net35",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "wp71",
      "wp80",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.DependencyStrapper.ResolveTypeDetailsList(IDictionary`2 dependencyMap, Type type)\r\n   at HaveBox.DependencyStrapper.GetParameterTypeDetails(IDictionary`2 dependencyMap, ParameterInfo parameterInfo)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass7.<DependencyCreateInstanceResolver>b__6(ParameterInfo x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.DependencyCreateInstanceResolver(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstanceDelegate(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstance(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__2(TypeDetails z)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__0(KeyValuePair`2 x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.Strap(IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.StrapAndMarkSingletons(Guid containerId, IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 78\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.DependencyStrapper.ResolveTypeDetailsList(IDictionary`2 dependencyMap, Type type)\r\n   at HaveBox.DependencyStrapper.GetParameterTypeDetails(IDictionary`2 dependencyMap, ParameterInfo parameterInfo)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass7.<DependencyCreateInstanceResolver>b__6(ParameterInfo x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.DependencyCreateInstanceResolver(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstanceDelegate(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstance(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__2(TypeDetails z)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__0(KeyValuePair`2 x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.Strap(IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.StrapAndMarkSingletons(Guid containerId, IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 78\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.DependencyStrapper.ResolveTypeDetailsList(IDictionary`2 dependencyMap, Type type)\r\n   at HaveBox.DependencyStrapper.GetParameterTypeDetails(IDictionary`2 dependencyMap, ParameterInfo parameterInfo)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass7.<DependencyCreateInstanceResolver>b__6(ParameterInfo x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.DependencyCreateInstanceResolver(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstanceDelegate(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstance(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__2(TypeDetails z)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__0(KeyValuePair`2 x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.Strap(IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.StrapAndMarkSingletons(Guid containerId, IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 78\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.DependencyStrapper.ResolveTypeDetailsList(IDictionary`2 dependencyMap, Type type)\r\n   at HaveBox.DependencyStrapper.GetParameterTypeDetails(IDictionary`2 dependencyMap, ParameterInfo parameterInfo)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass7.<DependencyCreateInstanceResolver>b__6(ParameterInfo x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.DependencyCreateInstanceResolver(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstanceDelegate(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstance(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__2(TypeDetails z)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__0(KeyValuePair`2 x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.Strap(IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.StrapAndMarkSingletons(Guid containerId, IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 78\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.DependencyStrapper.ResolveTypeDetailsList(IDictionary`2 dependencyMap, Type type)\r\n   at HaveBox.DependencyStrapper.GetParameterTypeDetails(IDictionary`2 dependencyMap, ParameterInfo parameterInfo)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass7.<DependencyCreateInstanceResolver>b__6(ParameterInfo x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.DependencyCreateInstanceResolver(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstanceDelegate(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstance(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__2(TypeDetails z)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__0(KeyValuePair`2 x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.Strap(IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.StrapAndMarkSingletons(Guid containerId, IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 78\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.IndependentService', on 'DependencyInjection.FeatureTests.TestTypes.GenericServiceWithIService2Constraint`1[T]' violates the constraint of type 'T'. ---> System.TypeLoadException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.IndependentService', on 'DependencyInjection.FeatureTests.TestTypes.GenericServiceWithIService2Constraint`1[T]' violates the constraint of type parameter 'T'.\r\n   at System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, Int32 numGenericArgs, ObjectHandleOnStack type)\r\n   at System.RuntimeTypeHandle.Instantiate(Type[] inst)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at HaveBox.Container.CreateClosedGenericTypeAndRegister(Config config, Type type, TypeDetails openGenericType)\r\n   at HaveBox.Container.<>c__DisplayClass5.<TryResolveGenericTypeTree>b__4(TypeDetails openGenericType)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.Container.TryResolveGenericTypeTree(Config config, Type type)\r\n   at HaveBox.Container.TryResolveGenericType(Type type)\r\n   at HaveBox.Container.GetInstance(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.Resolve(Type serviceType) in [removed]\\HaveBoxAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterBase.ResolveAll(Type serviceType) in [removed]\\FrameworkAdapterBase.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.ResolveAll[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 54\r\n   at DependencyInjection.FeatureTests.GenericTests.ConstrainsForOpenGenerics(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 44"
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.Container.TryResolveGenericTypeTree(Config config, Type type)\r\n   at HaveBox.Container.TryResolveGenericType(Type type)\r\n   at HaveBox.Container.GetInstance(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.Resolve(Type serviceType) in [removed]\\HaveBoxAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.Container.TryResolveGenericTypeTree(Config config, Type type)\r\n   at HaveBox.Container.TryResolveGenericType(Type type)\r\n   at HaveBox.Container.GetInstance(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.Resolve(Type serviceType) in [removed]\\HaveBoxAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependency(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 33"
      },
      "PropertyDependencyIsOptional": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "System.NotSupportedException: Resolving for multiple ServiceWithMultipleConstructors constructors, is not supported\r\n   at HaveBox.Configuration.InjectionExpression.CheckForMoreThanOneConstructorOnType(Type type)\r\n   at HaveBox.Configuration.InjectionExpression.Use(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.<>c__DisplayClass4.<RegisterTransient>b__3(IConfig r) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 31"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at HaveBox.DependencyStrapper.ResolveTypeDetailsList(IDictionary`2 dependencyMap, Type type)\r\n   at HaveBox.DependencyStrapper.GetParameterTypeDetails(IDictionary`2 dependencyMap, ParameterInfo parameterInfo)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass7.<DependencyCreateInstanceResolver>b__6(ParameterInfo x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.DependencyCreateInstanceResolver(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstanceDelegate(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.GetCreateInstance(TypeDetails typeDetails, IDictionary`2 dependencyMap)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__2(TypeDetails z)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.<>c__DisplayClass3.<Strap>b__0(KeyValuePair`2 x)\r\n   at HaveBox.IEnumerableExtensions.Each[T](IEnumerable`1 enumeration, Action`1 action)\r\n   at HaveBox.DependencyStrapper.Strap(IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.StrapAndMarkSingletons(Guid containerId, IDictionary`2 dependencyMap)\r\n   at HaveBox.Container.Configure(Action`1 registry)\r\n   at DependencyInjection.FeatureTests.Adapters.HaveBoxAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\HaveBoxAdapter.cs:line 20\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 8\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandling(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 71"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "IfInjector",
    "url": "https://github.com/iamahern/IfInjector",
    "version": "0.7.0.41843",
    "supports": [
      "net45",
      "net451",
      "win",
      "wp71",
      "wp80",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[0], 'System.Int32', on 'IfInjector.Resolver`1[CType] CreateResolverInstanceGeneric[BType,CType](IfInjector.IfBinding.BindingKey, IfInjector.IfBinding.IfInternal.BindingConfig, Boolean)' violates the constraint of type 'BType'. ---> System.Security.VerificationException: Method IfInjector.Injector.CreateResolverInstanceGeneric: type argument 'System.Int32' violates the constraint of type parameter 'BType'.\r\n   at System.RuntimeMethodHandle.GetStubIfNeeded(RuntimeMethodHandleInternal method, RuntimeType declaringType, RuntimeType[] methodInstantiation)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   at IfInjector.Injector.CreateResolverInstance(BindingKey bindingKey, Type implType, BindingConfig bindingConfig, Boolean isImplicitBinding)\r\n   at IfInjector.Injector.BindImplicit(BindingKey bindingKey)\r\n   at IfInjector.Injector.ResolveResolver(BindingKey bindingKey)\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Error on System.Collections.Generic.IList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]. Unable to resolve Interface and Abstract classes without a configuration.\r\n   at IfInjector.IfBinding.IfInternal.BindingConfig`1.ThrowInterfaceException()\r\n   at lambda_method(Closure )\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Error on System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]. Unable to resolve Interface and Abstract classes without a configuration.\r\n   at IfInjector.IfBinding.IfInternal.BindingConfig`1.ThrowInterfaceException()\r\n   at lambda_method(Closure )\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Error on System.Collections.Generic.IEnumerable`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]. Unable to resolve Interface and Abstract classes without a configuration.\r\n   at IfInjector.IfBinding.IfInternal.BindingConfig`1.ThrowInterfaceException()\r\n   at lambda_method(Closure )\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Error on System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]. Unable to resolve Interface and Abstract classes without a configuration.\r\n   at IfInjector.IfBinding.IfInternal.BindingConfig`1.ThrowInterfaceException()\r\n   at lambda_method(Closure )\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Error on System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]. Unable to resolve Interface and Abstract classes without a configuration.\r\n   at IfInjector.IfBinding.IfInternal.BindingConfig`1.ThrowInterfaceException()\r\n   at lambda_method(Closure )\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.GenericService`1[T]', on 'IfInjector.IfBinding.IBinding`2[DependencyInjection.FeatureTests.TestTypes.IGenericService`1[T],CType] To[CType]()' violates the constraint of type 'CType'. ---> System.Security.VerificationException: Method IfInjector.IfBinding.IOngoingBinding`1[DependencyInjection.FeatureTests.TestTypes.IGenericService`1[T]].To: type argument 'DependencyInjection.FeatureTests.TestTypes.GenericService`1[T]' violates the constraint of type parameter 'CType'.\r\n   at System.RuntimeMethodHandle.GetStubIfNeeded(RuntimeMethodHandleInternal method, RuntimeType declaringType, RuntimeType[] methodInstantiation)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.RewriteMethodIfRequired(MethodInfo method) in [removed]\\GenericRewritingVisitor.cs:line 29\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.VisitMethodCall(MethodCallExpression node) in [removed]\\GenericRewritingVisitor.cs:line 16\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitArguments(IArgumentProvider nodes)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.VisitMethodCall(MethodCallExpression node) in [removed]\\GenericRewritingVisitor.cs:line 18\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitLambda[T](Expression`1 node)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.VisitLambda[T](Expression`1 node) in [removed]\\GenericRewritingVisitor.cs:line 57\r\n   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.Rewrite[TDelegate](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 21\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke(Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 10\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\IfInjectorAdapter.cs:line 25\r\n   at DependencyInjection.FeatureTests.GenericTests.OpenGenericTypes(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 21"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[0], 'System.IntPtr', on 'IfInjector.Resolver`1[CType] CreateResolverInstanceGeneric[BType,CType](IfInjector.IfBinding.BindingKey, IfInjector.IfBinding.IfInternal.BindingConfig, Boolean)' violates the constraint of type 'BType'. ---> System.Security.VerificationException: Method IfInjector.Injector.CreateResolverInstanceGeneric: type argument 'System.IntPtr' violates the constraint of type parameter 'BType'.\r\n   at System.RuntimeMethodHandle.GetStubIfNeeded(RuntimeMethodHandleInternal method, RuntimeType declaringType, RuntimeType[] methodInstantiation)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   at IfInjector.Injector.CreateResolverInstance(BindingKey bindingKey, Type implType, BindingConfig bindingConfig, Boolean isImplicitBinding)\r\n   at IfInjector.Injector.BindImplicit(BindingKey bindingKey)\r\n   at IfInjector.Injector.ResolveResolver(BindingKey bindingKey)\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileArgumentListExprs(IEnumerable`1 args)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.MissingMemberException: The lazily-initialized type does not have a public, parameterless constructor.\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 31"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Error on DependencyInjection.FeatureTests.TestTypes.IService. Unable to resolve Interface and Abstract classes without a configuration.\r\n   at IfInjector.IfBinding.IfInternal.BindingConfig`1.ThrowInterfaceException()\r\n   at lambda_method(Closure )\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.GetResolveExpression()\r\n   at IfInjector.Injector.ResolveResolverExpression(BindingKey bindingKey)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetResolverInvocationExpressionForType(Type parameterType)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.GetSetterValueExpression[MIType](IMemberSetterConfig`1 setter)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.<CompileConstructorExpr>b__9(IMemberSetterConfig`1 iconf)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.<UnionIterator>d__88`1.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileConstructorExpr()\r\n   at IfInjector.IfCore.IfExpression.ExpressionCompiler`1.CompileResolverExpression()\r\n   at IfInjector.Resolver`1.CompileResolver()\r\n   at IfInjector.Resolver`1.DoResolve()\r\n   at IfInjector.Injector.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.Resolve(Type serviceType) in [removed]\\IfInjectorAdapter.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyIsOptional(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 42"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "failure",
        "error": "Xunit.Sdk.EmptyException: Assert.Empty() failure\r\n   at Xunit.Assert.Empty(IEnumerable collection)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyDoesNotNeedCustomAttribute(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 59"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nPosition: First difference is at position 0\r\nExpected: Most resolvable\r\nActual:   Default\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n   at Xunit.Assert.Equal[T](T expected, T actual)\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 36"
      },
      "RegistrationAtAnyStage": {
        "result": "failure",
        "error": "IfInjector.IfCore.InjectorException: Injector is in resolved state. Explicit binding registration is no longer permitted.\r\n   at IfInjector.Injector.BindExplicit(IInternalBinding internalBinding)\r\n   at IfInjector.Injector.Register(IBinding binding)\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke(Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 11\r\n   at DependencyInjection.FeatureTests.Adapters.IfInjectorAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\IfInjectorAdapter.cs:line 25\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.RegistrationAtAnyStage(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 52"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "LightCore",
    "url": "http://lightcore.ch/en/default.aspx",
    "version": "1.5.1.0",
    "supports": [
      "net35",
      "net35-cf",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "sl30",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "System.ArgumentException: Object of type 'System.Object[]' cannot be converted to type 'DependencyInjection.FeatureTests.TestTypes.IService[]'.\r\n   at System.RuntimeType.TryChangeType(Object value, Binder binder, CultureInfo culture, Boolean needsSpecialCast)\r\n   at System.RuntimeType.CheckValue(Object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr)\r\n   at System.Reflection.MethodBase.CheckArguments(Object[] parameters, Binder binder, BindingFlags invokeAttr, CultureInfo culture, Signature sig)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.ConstructorInfo.Invoke(Object[] parameters)\r\n   at LightCore.Activation.Activators.ReflectionActivator.ActivateInstance(ResolutionContext resolutionContext)\r\n   at LightCore.Registration.RegistrationItem.<>c__DisplayClass1.<ActivateInstance>b__0()\r\n   at LightCore.Lifecycle.TransientLifecycle.ReceiveInstanceInLifecycle(Func`1 newInstanceResolver)\r\n   at LightCore.Registration.RegistrationItem.ActivateInstance(ResolutionContext resolutionContext)\r\n   at LightCore.Container.Resolve(RegistrationItem registrationItem)\r\n   at LightCore.Container.ResolveInternal(Type contractType, IEnumerable`1 arguments, IDictionary`2 namedArguments)\r\n   at LightCore.Container.Resolve(Type contractType)\r\n   at DependencyInjection.FeatureTests.Adapters.LightCoreAdapter.Resolve(Type serviceType) in [removed]\\LightCoreAdapter.cs:line 33\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "success"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "success"
      },
      "IReadOnlyList": {
        "result": "success"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "failure",
        "error": "Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n   at Xunit.Assert.Equal[T](T expected, T actual)\r\n   at DependencyInjection.FeatureTests.GenericTests.ConstrainsForOpenGenerics(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 46"
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "success"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "success"
      },
      "NotCreatingLazyPrematurely": {
        "result": "success"
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "success"
      },
      "PropertyDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependency(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 33"
      },
      "PropertyDependencyIsOptional": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "ReasonableConstructorSelection": {
        "result": "success"
      },
      "RegistrationAtAnyStage": {
        "result": "failure",
        "error": "System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at DependencyInjection.FeatureTests.Adapters.LightCoreAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\LightCoreAdapter.cs:line 24\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.RegistrationAtAnyStage(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 52"
      },
      "GracefulRecursionHandling": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: LightCore fails recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 116\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandling(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 69"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "LinFu",
    "url": "https://github.com/philiplaureano/LinFu",
    "version": "2.3.0.41559",
    "supports": [
      "net35",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "failure",
        "error": "System.MissingMethodException: Constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' not found.\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, Object[] args)\r\n   at LinFu.IoC.Configuration.ConstructorInvoke.Invoke(Object target, ConstructorInfo targetMethod, Object[] arguments)\r\n   at LinFu.IoC.Configuration.DefaultActivator.CreateInstance(IContainerActivationContext context)\r\n   at LinFu.IoC.ContainerExtensions.AutoCreateInternal(IServiceContainer container, Type concreteType, Object[] additionalArguments)\r\n   at LinFu.IoC.Configuration.FactoryBuilder.<CreateFactoryMethodInternal>b__4[TService,TImplementation](IFactoryRequest request)\r\n   at LinFu.IoC.Factories.OncePerRequestFactory`1.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.Factories.BaseFactory`1.LinFu.IoC.Interfaces.IFactory.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.DefaultCreator.CreateFrom(IFactoryRequest factoryRequest, IFactory factory)\r\n   at LinFu.IoC.DefaultGetServiceBehavior.GetService(IServiceRequest serviceRequest)\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "System.MissingMethodException: Constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' not found.\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, Object[] args)\r\n   at LinFu.IoC.Configuration.ConstructorInvoke.Invoke(Object target, ConstructorInfo targetMethod, Object[] arguments)\r\n   at LinFu.IoC.Configuration.DefaultActivator.CreateInstance(IContainerActivationContext context)\r\n   at LinFu.IoC.ContainerExtensions.AutoCreateInternal(IServiceContainer container, Type concreteType, Object[] additionalArguments)\r\n   at LinFu.IoC.Configuration.FactoryBuilder.<CreateFactoryMethodInternal>b__4[TService,TImplementation](IFactoryRequest request)\r\n   at LinFu.IoC.Factories.OncePerRequestFactory`1.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.Factories.BaseFactory`1.LinFu.IoC.Interfaces.IFactory.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.DefaultCreator.CreateFrom(IFactoryRequest factoryRequest, IFactory factory)\r\n   at LinFu.IoC.DefaultGetServiceBehavior.GetService(IServiceRequest serviceRequest)\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "System.MissingMethodException: Constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' not found.\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, Object[] args)\r\n   at LinFu.IoC.Configuration.ConstructorInvoke.Invoke(Object target, ConstructorInfo targetMethod, Object[] arguments)\r\n   at LinFu.IoC.Configuration.DefaultActivator.CreateInstance(IContainerActivationContext context)\r\n   at LinFu.IoC.ContainerExtensions.AutoCreateInternal(IServiceContainer container, Type concreteType, Object[] additionalArguments)\r\n   at LinFu.IoC.Configuration.FactoryBuilder.<CreateFactoryMethodInternal>b__4[TService,TImplementation](IFactoryRequest request)\r\n   at LinFu.IoC.Factories.OncePerRequestFactory`1.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.Factories.BaseFactory`1.LinFu.IoC.Interfaces.IFactory.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.DefaultCreator.CreateFrom(IFactoryRequest factoryRequest, IFactory factory)\r\n   at LinFu.IoC.DefaultGetServiceBehavior.GetService(IServiceRequest serviceRequest)\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "System.MissingMethodException: Constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' not found.\r\n   at System.RuntimeType.CreateInstanceImpl(BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, StackCrawlMark& stackMark)\r\n   at System.Activator.CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes)\r\n   at System.Activator.CreateInstance(Type type, Object[] args)\r\n   at LinFu.IoC.Configuration.ConstructorInvoke.Invoke(Object target, ConstructorInfo targetMethod, Object[] arguments)\r\n   at LinFu.IoC.Configuration.DefaultActivator.CreateInstance(IContainerActivationContext context)\r\n   at LinFu.IoC.ContainerExtensions.AutoCreateInternal(IServiceContainer container, Type concreteType, Object[] additionalArguments)\r\n   at LinFu.IoC.Configuration.FactoryBuilder.<CreateFactoryMethodInternal>b__4[TService,TImplementation](IFactoryRequest request)\r\n   at LinFu.IoC.Factories.OncePerRequestFactory`1.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.Factories.BaseFactory`1.LinFu.IoC.Interfaces.IFactory.CreateInstance(IFactoryRequest request)\r\n   at LinFu.IoC.DefaultCreator.CreateFrom(IFactoryRequest factoryRequest, IFactory factory)\r\n   at LinFu.IoC.DefaultGetServiceBehavior.GetService(IServiceRequest serviceRequest)\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "failure",
        "error": "LinFu.IoC.ServiceNotFoundException: Service type 'System.Collections.Generic.IEnumerable`1[[DependencyInjection.FeatureTests.TestTypes.IGenericService`1[[DependencyInjection.FeatureTests.TestTypes.IndependentService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' not found\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterBase.ResolveAll(Type serviceType) in [removed]\\FrameworkAdapterBase.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.ResolveAll[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 54\r\n   at DependencyInjection.FeatureTests.GenericTests.ConstrainsForOpenGenerics(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 44"
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "LinFu.IoC.ServiceNotFoundException: Service type 'System.Func`1[[DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' not found\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "LinFu.IoC.ServiceNotFoundException: Service type 'System.Lazy`1[[DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' not found\r\n   at LinFu.IoC.ServiceContainer.GetService(String serviceName, Type serviceType, Object[] additionalArguments)\r\n   at LinFu.IoC.ServiceContainer.GetService(Type serviceType, Object[] additionalArguments)\r\n   at DependencyInjection.FeatureTests.Adapters.LinFuAdapter.Resolve(Type serviceType) in [removed]\\LinFuAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "success"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "failure",
        "error": "Xunit.Sdk.EmptyException: Assert.Empty() failure\r\n   at Xunit.Assert.Empty(IEnumerable collection)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyDoesNotNeedCustomAttribute(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 59"
      },
      "ReasonableConstructorSelection": {
        "result": "success"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "MEF",
    "version": "4.0.0.0",
    "supports": [],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.CompositionException: The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.\r\n\r\n1) The importing constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' is using ImportManyAttribute on parameter 'services' with a non-assignable type. On constructor parameters the ImportManyAttribute only supports importing into types T[] or IEnumerable<T>.\r\n\r\nResulting in: Cannot activate part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService)) -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\nResulting in: Cannot get export 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService))\")' from part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService))\") -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IList(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\n   at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n   at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.CompositionException: The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.\r\n\r\n1) The importing constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' is using ImportManyAttribute on parameter 'services' with a non-assignable type. On constructor parameters the ImportManyAttribute only supports importing into types T[] or IEnumerable<T>.\r\n\r\nResulting in: Cannot activate part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService)) -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\nResulting in: Cannot get export 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService))\")' from part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService))\") -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.ICollection(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\n   at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n   at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.CompositionException: The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.\r\n\r\n1) The importing constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' is using ImportManyAttribute on parameter 'services' with a non-assignable type. On constructor parameters the ImportManyAttribute only supports importing into types T[] or IEnumerable<T>.\r\n\r\nResulting in: Cannot activate part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService)) -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\nResulting in: Cannot get export 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService))\")' from part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService))\") -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyCollection(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\n   at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n   at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.CompositionException: The composition produced a single composition error. The root cause is provided below. Review the CompositionException.Errors property for more detailed information.\r\n\r\n1) The importing constructor on type 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' is using ImportManyAttribute on parameter 'services' with a non-assignable type. On constructor parameters the ImportManyAttribute only supports importing into types T[] or IEnumerable<T>.\r\n\r\nResulting in: Cannot activate part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService)) -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\nResulting in: Cannot get export 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService))\")' from part 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService))'.\r\nElement: DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService)) (ContractName=\"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService))\") -->  DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService)) -->  TypeCatalog (Types='DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency(System.Collections.Generic.IReadOnlyList(DependencyInjection.FeatureTests.TestTypes.IService))').\r\n\r\n   at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n   at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n   at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n   at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[T](Export export)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.ImportCardinalityMismatchException: No exports were found that match the constraint: \n\tContractName\tSystem.Collections.Generic.IEnumerable(DependencyInjection.FeatureTests.TestTypes.IGenericService(DependencyInjection.FeatureTests.TestTypes.IndependentService))\n\tRequiredTypeIdentity\tSystem.Collections.Generic.IEnumerable(DependencyInjection.FeatureTests.TestTypes.IGenericService(DependencyInjection.FeatureTests.TestTypes.IndependentService))\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(ImportDefinition definition, AtomicComposition atomicComposition)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(Type type, Type metadataViewType, String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterBase.ResolveAll(Type serviceType) in [removed]\\FrameworkAdapterBase.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.ResolveAll[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 54\r\n   at DependencyInjection.FeatureTests.GenericTests.ConstrainsForOpenGenerics(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 44"
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.ImportCardinalityMismatchException: No exports were found that match the constraint: \n\tContractName\tDependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency()\n\tRequiredTypeIdentity\tDependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency()\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(ImportDefinition definition, AtomicComposition atomicComposition)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(Type type, Type metadataViewType, String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.ImportCardinalityMismatchException: No exports were found that match the constraint: \n\tContractName\tSystem.Lazy(DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency)\n\tRequiredTypeIdentity\tSystem.Lazy(DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(ImportDefinition definition, AtomicComposition atomicComposition)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(Type type, Type metadataViewType, String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.ImportCardinalityMismatchException: No exports were found that match the constraint: \n\tContractName\tDependencyInjection.FeatureTests.TestTypes.ServiceWithSimplePropertyDependency\n\tRequiredTypeIdentity\tDependencyInjection.FeatureTests.TestTypes.ServiceWithSimplePropertyDependency\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(ImportDefinition definition, AtomicComposition atomicComposition)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(Type type, Type metadataViewType, String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyIsOptional(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 42"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "success"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "System.ComponentModel.Composition.ImportCardinalityMismatchException: No exports were found that match the constraint: \n\tContractName\tDependencyInjection.FeatureTests.TestTypes.ServiceWithMultipleConstructors\n\tRequiredTypeIdentity\tDependencyInjection.FeatureTests.TestTypes.ServiceWithMultipleConstructors\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(ImportDefinition definition, AtomicComposition atomicComposition)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(Type type, Type metadataViewType, String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[T](String contractName, ImportCardinality cardinality)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T](String contractName)\r\n   at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[T]()\r\n   at lambda_method(Closure )\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke[TResult](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 16\r\n   at DependencyInjection.FeatureTests.Adapters.MefAdapter.Resolve(Type serviceType) in [removed]\\MefAdapter.cs:line 56\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 33"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "MicroSliver",
    "url": "http://microsliver.codeplex.com/",
    "version": "2.1.6.0",
    "supports": [
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "win",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "System.Exception: MicroSliver is unable to set values to primitive/value types in the constructor.\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "System.Exception: MicroSliver does not have a mapping for interface of type IList`1. ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   --- End of inner exception stack trace ---\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "System.Exception: MicroSliver does not have a mapping for interface of type ICollection`1. ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   --- End of inner exception stack trace ---\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "System.Exception: MicroSliver does not have a mapping for interface of type IEnumerable`1. ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   --- End of inner exception stack trace ---\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "System.Exception: MicroSliver does not have a mapping for interface of type IReadOnlyCollection`1. ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   --- End of inner exception stack trace ---\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "System.Exception: MicroSliver does not have a mapping for interface of type IReadOnlyList`1. ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   --- End of inner exception stack trace ---\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[1], 'DependencyInjection.FeatureTests.TestTypes.GenericService`1[T]', on 'MicroSliver.IMap Map[TContract,TConcrete]()' violates the constraint of type 'TConcrete'. ---> System.Security.VerificationException: Method MicroSliver.IoC.Map: type argument 'DependencyInjection.FeatureTests.TestTypes.GenericService`1[T]' violates the constraint of type parameter 'TConcrete'.\r\n   at System.RuntimeMethodHandle.GetStubIfNeeded(RuntimeMethodHandleInternal method, RuntimeType declaringType, RuntimeType[] methodInstantiation)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.Reflection.RuntimeMethodInfo.MakeGenericMethod(Type[] methodInstantiation)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.RewriteMethodIfRequired(MethodInfo method) in [removed]\\GenericRewritingVisitor.cs:line 39\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.VisitMethodCall(MethodCallExpression node) in [removed]\\GenericRewritingVisitor.cs:line 16\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(MethodCallExpression node)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.VisitMethodCall(MethodCallExpression node) in [removed]\\GenericRewritingVisitor.cs:line 18\r\n   at System.Linq.Expressions.MethodCallExpression.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at System.Linq.Expressions.ExpressionVisitor.VisitLambda[T](Expression`1 node)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericRewritingVisitor.VisitLambda[T](Expression`1 node) in [removed]\\GenericRewritingVisitor.cs:line 57\r\n   at System.Linq.Expressions.Expression`1.Accept(ExpressionVisitor visitor)\r\n   at System.Linq.Expressions.ExpressionVisitor.Visit(Expression node)\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.Rewrite[TDelegate](Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 21\r\n   at DependencyInjection.FeatureTests.Adapters.Support.GenericHelper.RewriteAndInvoke(Expression`1 call, Type[] genericArguments) in [removed]\\GenericHelper.cs:line 10\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\MicroSliverAdapter.cs:line 41\r\n   at DependencyInjection.FeatureTests.GenericTests.OpenGenericTypes(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 21"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.Exception: MicroSliver is unable to set values to primitive/value types in the constructor.\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.<ProcessCtor>b__7(ParameterInfo p)\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at MicroSliver.IoC.ProcessCtor(ICtorInfo ctorInfo)\r\n   at MicroSliver.IoC.Get(Type T)\r\n   at MicroSliver.IoC.GetByType(Type T)\r\n   at DependencyInjection.FeatureTests.Adapters.MicroSliverAdapter.Resolve(Type serviceType) in [removed]\\MicroSliverAdapter.cs:line 55\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.MissingMemberException: The lazily-initialized type does not have a public, parameterless constructor.\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 31"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependency(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 33"
      },
      "PropertyDependencyIsOptional": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nPosition: First difference is at position 0\r\nExpected: Most resolvable\r\nActual:   Default\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n   at Xunit.Assert.Equal[T](T expected, T actual)\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 36"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: MicroSliver fails recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 116\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandling(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 69"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "Mugen",
    "url": "http://mugeninjection.codeplex.com/",
    "version": "3.5.0.0",
    "supports": [
      "net20",
      "net30",
      "net35",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "win",
      "wp71",
      "wp80",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "success"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "MugenInjection.Exceptions.BindingNotFoundException: No matching bindings are available for a type \"IReadOnlyCollection{\"IService\"}\", and the type is not self-bindable.\r\nMake sure that you specify the binding for \"IReadOnlyCollection{\"IService\"}\".\r\nThe activation path:\r\n1) Request of \"ServiceWithListConstructorDependency{\"IReadOnlyCollection{\"IService\"}\"}\" using the type binding from \"ServiceWithListConstructorDependency{\"IReadOnlyCollection{\"IService\"}\"}\",  to \"ServiceWithListConstructorDependency{\"IReadOnlyCollection{\"IService\"}\"}\" in \"TransientScopeLifecycle\" lifecycle.\t\r\n2) Injection of dependency \"IReadOnlyCollection{\"IService\"}\" in parameter \"System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService] services\" of constructor \"Void .ctor(System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService])\" declared in \"ServiceWithListConstructorDependency{\"IReadOnlyCollection{\"IService\"}\"}\"  \t\r\n\r\n\r\n   at MugenInjection.Core.InjectorBase.TryResolve(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 130\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 227\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.GetParameters(MethodBase methodBase, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 399\r\n   at MugenInjection.Activators.ExpressionActivator.Activate(ConstructorInfo constructorInfo) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\Activators\\ExpressionActivator.cs:line 61\r\n   at MugenInjection.Activators.ActivatorBase.Activate(ConstructorInfo constructorInfo, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Activators\\ActivatorBase.cs:line 71\r\n   at MugenInjection.Bindings.TypeBinding.ResolveService(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\TypeBinding.cs:line 88\r\n   at MugenInjection.Bindings.BindingBase.ResolveServiceInternal(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 351\r\n   at MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\DefaultScopeLifecycleContext.cs:line 50\r\n   at MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\TransientScopeLifecycle.cs:line 50\r\n   at MugenInjection.Bindings.BindingBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 236\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.Activate(IBinding binding, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 297\r\n   at MugenInjection.Core.InjectorBase.Activate(IBinding binding, IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 136\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 219\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.InjectorExtensionUtils.Get(IInjectorResolver injector, Type service, MemberInfo member, ParameterInfo parameterInfo, IDictionary`2 specialParameters, IEnumerable`1 parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\InjectorExtensionUtils.cs:line 43\r\n   at MugenInjection.InjectorExtension.Get(IInjectorResolver injector, Type service, IInjectionParameter[] parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\InjectorExtension.cs:line 63\r\n   at DependencyInjection.FeatureTests.Adapters.MugenAdapter.Resolve(Type serviceType) in [removed]\\MugenAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "MugenInjection.Exceptions.BindingNotFoundException: No matching bindings are available for a type \"IReadOnlyList{\"IService\"}\", and the type is not self-bindable.\r\nMake sure that you specify the binding for \"IReadOnlyList{\"IService\"}\".\r\nThe activation path:\r\n1) Request of \"ServiceWithListConstructorDependency{\"IReadOnlyList{\"IService\"}\"}\" using the type binding from \"ServiceWithListConstructorDependency{\"IReadOnlyList{\"IService\"}\"}\",  to \"ServiceWithListConstructorDependency{\"IReadOnlyList{\"IService\"}\"}\" in \"TransientScopeLifecycle\" lifecycle.\t\r\n2) Injection of dependency \"IReadOnlyList{\"IService\"}\" in parameter \"System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService] services\" of constructor \"Void .ctor(System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService])\" declared in \"ServiceWithListConstructorDependency{\"IReadOnlyList{\"IService\"}\"}\"  \t\r\n\r\n\r\n   at MugenInjection.Core.InjectorBase.TryResolve(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 130\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 227\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.GetParameters(MethodBase methodBase, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 399\r\n   at MugenInjection.Activators.ExpressionActivator.Activate(ConstructorInfo constructorInfo) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\Activators\\ExpressionActivator.cs:line 61\r\n   at MugenInjection.Activators.ActivatorBase.Activate(ConstructorInfo constructorInfo, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Activators\\ActivatorBase.cs:line 71\r\n   at MugenInjection.Bindings.TypeBinding.ResolveService(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\TypeBinding.cs:line 88\r\n   at MugenInjection.Bindings.BindingBase.ResolveServiceInternal(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 351\r\n   at MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\DefaultScopeLifecycleContext.cs:line 50\r\n   at MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\TransientScopeLifecycle.cs:line 50\r\n   at MugenInjection.Bindings.BindingBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 236\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.Activate(IBinding binding, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 297\r\n   at MugenInjection.Core.InjectorBase.Activate(IBinding binding, IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 136\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 219\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.InjectorExtensionUtils.Get(IInjectorResolver injector, Type service, MemberInfo member, ParameterInfo parameterInfo, IDictionary`2 specialParameters, IEnumerable`1 parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\InjectorExtensionUtils.cs:line 43\r\n   at MugenInjection.InjectorExtension.Get(IInjectorResolver injector, Type service, IInjectionParameter[] parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\InjectorExtension.cs:line 63\r\n   at DependencyInjection.FeatureTests.Adapters.MugenAdapter.Resolve(Type serviceType) in [removed]\\MugenAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.IndependentService', on 'DependencyInjection.FeatureTests.TestTypes.GenericServiceWithIService2Constraint`1[T]' violates the constraint of type 'T'. ---> System.TypeLoadException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.IndependentService', on 'DependencyInjection.FeatureTests.TestTypes.GenericServiceWithIService2Constraint`1[T]' violates the constraint of type parameter 'T'.\r\n   at System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, Int32 numGenericArgs, ObjectHandleOnStack type)\r\n   at System.RuntimeTypeHandle.Instantiate(Type[] inst)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at MugenInjection.Bindings.TypeBinding.ResolveService(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\TypeBinding.cs:line 87\r\n   at MugenInjection.Bindings.BindingBase.ResolveServiceInternal(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 351\r\n   at MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\DefaultScopeLifecycleContext.cs:line 50\r\n   at MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\TransientScopeLifecycle.cs:line 50\r\n   at MugenInjection.Bindings.BindingBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 236\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.Activate(IBinding binding, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 297\r\n   at MugenInjection.Core.InjectorBase.Activate(IBinding binding, IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 136\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 286\r\n   at MugenInjection.Core.InjectorBase.ResolveAll(IBindingContext bindingContext, Boolean useParentToResolve) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 480\r\n   at MugenInjection.Core.Components.CollectionConverter.ConvertToCollection(Type collectionType, Type elementType, ActivatorDelegate createCollection, InvokeMethodDelegate`1 addMethod, Object value) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\Converters\\CollectionConverter.cs:line 96\r\n   at MugenInjection.Core.Components.CollectionConverter.<>c__DisplayClass2.<TryConvertInternal>b__1(Object o) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\Converters\\CollectionConverter.cs:line 172\r\n   at MugenInjection.Core.InjectorBase.Activate(Object value, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 148\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 338\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.InjectorExtensionUtils.Get(IInjectorResolver injector, Type service, MemberInfo member, ParameterInfo parameterInfo, IDictionary`2 specialParameters, IEnumerable`1 parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\InjectorExtensionUtils.cs:line 43\r\n   at MugenInjection.InjectorExtension.Get(IInjectorResolver injector, Type service, IInjectionParameter[] parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\InjectorExtension.cs:line 63\r\n   at DependencyInjection.FeatureTests.Adapters.MugenAdapter.Resolve(Type serviceType) in [removed]\\MugenAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterBase.ResolveAll(Type serviceType) in [removed]\\FrameworkAdapterBase.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.ResolveAll[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 54\r\n   at DependencyInjection.FeatureTests.GenericTests.ConstrainsForOpenGenerics(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 44"
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "failure",
        "error": "MugenInjection.Exceptions.BindingNotFoundException: No matching bindings are available for a type \"IService2\", and the type is not self-bindable.\r\nMake sure that you specify the binding for \"IService2\".\r\nThe activation path:\r\n1) Request of \"ServiceWithTwoConstructorDependencies\" using the type binding from \"ServiceWithTwoConstructorDependencies\",  to \"ServiceWithTwoConstructorDependencies\" in \"TransientScopeLifecycle\" lifecycle.\t\r\n2) Injection of dependency \"IService2\" in parameter \"DependencyInjection.FeatureTests.TestTypes.IService2 service2\" of constructor \"Void .ctor(DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests.TestTypes.IService2)\" declared in \"ServiceWithTwoConstructorDependencies\"  \t\r\n\r\n\r\n   at MugenInjection.Core.InjectorBase.TryResolve(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 130\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 227\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.GetParameters(MethodBase methodBase, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 399\r\n   at MugenInjection.Activators.ExpressionActivator.Activate(ConstructorInfo constructorInfo) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\Activators\\ExpressionActivator.cs:line 61\r\n   at MugenInjection.Activators.ActivatorBase.Activate(ConstructorInfo constructorInfo, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Activators\\ActivatorBase.cs:line 71\r\n   at MugenInjection.Bindings.TypeBinding.ResolveService(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\TypeBinding.cs:line 88\r\n   at MugenInjection.Bindings.BindingBase.ResolveServiceInternal(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 351\r\n   at MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\DefaultScopeLifecycleContext.cs:line 50\r\n   at MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\TransientScopeLifecycle.cs:line 50\r\n   at MugenInjection.Bindings.BindingBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 236\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.Activate(IBinding binding, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 297\r\n   at MugenInjection.Core.InjectorBase.Activate(IBinding binding, IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 136\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 219\r\n   at MugenInjection.Core.InjectorBase.<Activate>b__d(IBindingContext context) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 338\r\n   at MugenInjection.Core.Components.FactoryAndLazyConverter.FactoryResolve.Invoke(Object[] objects) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\Converters\\FactoryAndLazyConverter.cs:line 186\r\n   at _DynamicMethodMugenInjection_Func`2_5367d9cb598843ed9fa3309c3d342968(Func`2 , IService2 )\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithParameter(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 55"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "success"
      },
      "NotCreatingLazyPrematurely": {
        "result": "success"
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "success"
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "failure",
        "error": "MugenInjection.Exceptions.BindingNotFoundException: No matching bindings are available for a type \"IService\", and the type is not self-bindable.\r\nMake sure that you specify the binding for \"IService\".\r\nThe activation path:\r\n1) Request of \"ServiceWithSimplePropertyDependency\" using the type binding from \"ServiceWithSimplePropertyDependency\",  to \"ServiceWithSimplePropertyDependency\" in \"TransientScopeLifecycle\" lifecycle.\t\r\n2) Injection of dependency \"IService\" in parameter of property \"DependencyInjection.FeatureTests.TestTypes.IService Service\" declared in \"ServiceWithSimplePropertyDependency\"  \t\r\n\r\n\r\n   at MugenInjection.Core.InjectorBase.TryResolve(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 130\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 227\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.GetParameter(MemberInfo memberInfo, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 449\r\n   at MugenInjection.Activators.ExpressionActivator.Inject[T](Type targetType, T& target) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\Activators\\ExpressionActivator.cs:line 96\r\n   at MugenInjection.Activators.ActivatorBase.Activate(ConstructorInfo constructorInfo, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Activators\\ActivatorBase.cs:line 71\r\n   at MugenInjection.Bindings.TypeBinding.ResolveService(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\TypeBinding.cs:line 88\r\n   at MugenInjection.Bindings.BindingBase.ResolveServiceInternal(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 351\r\n   at MugenInjection.Scope.DefaultScopeLifecycleContext.ResolveCurrentService() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\DefaultScopeLifecycleContext.cs:line 50\r\n   at MugenInjection.Scope.TransientScopeLifecycle.GetObjectFromScope() in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Scope\\TransientScopeLifecycle.cs:line 50\r\n   at MugenInjection.Bindings.BindingBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Bindings\\BindingBase.cs:line 236\r\n   at MugenInjection.Core.Components.BindingActivatorComponent.Activate(IBinding binding, IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Components\\BindingActivatorComponent.cs:line 297\r\n   at MugenInjection.Core.InjectorBase.Activate(IBinding binding, IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 136\r\n   at MugenInjection.Core.InjectorBase.ActivateOneInstance(IBindingContext bindingContext, Func`2 converter) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 219\r\n   at MugenInjection.Core.InjectorBase.Activate(IBindingContext bindingContext, ActivateType activateType, Boolean useParentForAll) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 281\r\n   at MugenInjection.Core.InjectorBase.Resolve(IBindingContext bindingContext) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\Core\\InjectorBase.cs:line 449\r\n   at MugenInjection.InjectorExtensionUtils.Get(IInjectorResolver injector, Type service, MemberInfo member, ParameterInfo parameterInfo, IDictionary`2 specialParameters, IEnumerable`1 parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore\\InjectorExtensionUtils.cs:line 43\r\n   at MugenInjection.InjectorExtension.Get(IInjectorResolver injector, Type service, IInjectionParameter[] parameters) in g:\\MugenProjects\\MugenInjection\\MugenInjectionCore(Net 3.5)\\InjectorExtension.cs:line 63\r\n   at DependencyInjection.FeatureTests.Adapters.MugenAdapter.Resolve(Type serviceType) in [removed]\\MugenAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyIsOptional(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 42"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "failure",
        "error": "Xunit.Sdk.EmptyException: Assert.Empty() failure\r\n   at Xunit.Assert.Empty(IEnumerable collection)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyDoesNotNeedCustomAttribute(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 59"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nPosition: First difference is at position 0\r\nExpected: Most resolvable\r\nActual:   Default\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n   at Xunit.Assert.Equal[T](T expected, T actual)\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 36"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "Munq",
    "url": "http://munq.codeplex.com/",
    "version": "3.0.4501.20364",
    "supports": [
      "net11",
      "net20",
      "net30",
      "net35",
      "net35-cf",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "win",
      "wp",
      "wp71",
      "wp80",
      "sl20",
      "sl30",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[DependencyInjection.FeatureTests.TestTypes.IService[]] ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.IService[] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]] ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]] ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]] ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Func`1[DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve System.Lazy`1[DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency] ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.NotNullException: Assert.NotNull() Failure\r\n   at Xunit.Assert.NotNull(Object object)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependency(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 33"
      },
      "PropertyDependencyIsOptional": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "skipped",
        "comment": "Skipped as Simple dependency (Property dependencies) is not supported by this framework."
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.ServiceWithMultipleConstructors ---> System.Collections.Generic.KeyNotFoundException: Munq IocContainer failed to resolve DependencyInjection.FeatureTests.TestTypes.IUnregisteredService ---> System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.get_Item(TKey key)\r\n   at Munq.TypeRegistry.Get(String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve[TType]()\r\n   at lambda_method(Closure , IDependencyResolver )\r\n   at Munq.Registration.GetInstance()\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   --- End of inner exception stack trace ---\r\n   at Munq.IocContainer.HandleUnResolved(Exception knfe, String name, Type type)\r\n   at Munq.IocContainer.Resolve(String name, Type type)\r\n   at Munq.IocContainer.Resolve(Type type)\r\n   at DependencyInjection.FeatureTests.Adapters.MunqAdapter.Resolve(Type serviceType) in [removed]\\MunqAdapter.cs:line 28\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 33"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: Munq fails recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 116\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandling(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 69"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "Ninject",
    "url": "http://www.ninject.org/",
    "version": "3.0.0.0",
    "supports": [
      "net35",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "wp",
      "wp71",
      "wp80",
      "sl20",
      "sl30",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "success"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "Ninject.ActivationException: Error activating IReadOnlyCollection{IService}\r\nNo matching bindings are available, and the type is not self-bindable.\r\nActivation path:\r\n  2) Injection of dependency IReadOnlyCollection{IService} into parameter services of constructor of type ServiceWithListConstructorDependency{IReadOnlyCollection{IService}}\r\n  1) Request for ServiceWithListConstructorDependency{IReadOnlyCollection{IService}}\r\n\r\nSuggestions:\r\n  1) Ensure that you have defined a binding for IReadOnlyCollection{IService}.\r\n  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.\r\n  3) Ensure you have not accidentally created more than one kernel.\r\n  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.\r\n  5) If you are using automatic module loading, ensure the search path and filters are correct.\r\n\r\n   at Ninject.KernelBase.Resolve(IRequest request) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 359\r\n   at Ninject.Planning.Targets.Target`1.GetValue(Type service, IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 197\r\n   at Ninject.Planning.Targets.Target`1.ResolveWithin(IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 165\r\n   at Ninject.Activation.Providers.StandardProvider.GetValue(IContext context, ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 114\r\n   at Ninject.Activation.Providers.StandardProvider.<>c__DisplayClass4.<Create>b__2(ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 96\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Ninject.Activation.Providers.StandardProvider.Create(IContext context) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 96\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<>c__DisplayClass10.<Resolve>b__c(IBinding binding) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 386\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Syntax\\ResolutionExtensions.cs:line 151\r\n   at DependencyInjection.FeatureTests.Adapters.NinjectAdapter.Resolve(Type serviceType) in [removed]\\NinjectAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "Ninject.ActivationException: Error activating IReadOnlyList{IService}\r\nNo matching bindings are available, and the type is not self-bindable.\r\nActivation path:\r\n  2) Injection of dependency IReadOnlyList{IService} into parameter services of constructor of type ServiceWithListConstructorDependency{IReadOnlyList{IService}}\r\n  1) Request for ServiceWithListConstructorDependency{IReadOnlyList{IService}}\r\n\r\nSuggestions:\r\n  1) Ensure that you have defined a binding for IReadOnlyList{IService}.\r\n  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.\r\n  3) Ensure you have not accidentally created more than one kernel.\r\n  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.\r\n  5) If you are using automatic module loading, ensure the search path and filters are correct.\r\n\r\n   at Ninject.KernelBase.Resolve(IRequest request) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 359\r\n   at Ninject.Planning.Targets.Target`1.GetValue(Type service, IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 197\r\n   at Ninject.Planning.Targets.Target`1.ResolveWithin(IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 165\r\n   at Ninject.Activation.Providers.StandardProvider.GetValue(IContext context, ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 114\r\n   at Ninject.Activation.Providers.StandardProvider.<>c__DisplayClass4.<Create>b__2(ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 96\r\n   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Ninject.Activation.Providers.StandardProvider.Create(IContext context) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 96\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<>c__DisplayClass10.<Resolve>b__c(IBinding binding) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 386\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Syntax\\ResolutionExtensions.cs:line 151\r\n   at DependencyInjection.FeatureTests.Adapters.NinjectAdapter.Resolve(Type serviceType) in [removed]\\NinjectAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "failure",
        "error": "System.ArgumentException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.IndependentService', on 'DependencyInjection.FeatureTests.TestTypes.GenericServiceWithIService2Constraint`1[T]' violates the constraint of type 'T'. ---> System.TypeLoadException: GenericArguments[0], 'DependencyInjection.FeatureTests.TestTypes.IndependentService', on 'DependencyInjection.FeatureTests.TestTypes.GenericServiceWithIService2Constraint`1[T]' violates the constraint of type parameter 'T'.\r\n   at System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, Int32 numGenericArgs, ObjectHandleOnStack type)\r\n   at System.RuntimeTypeHandle.Instantiate(Type[] inst)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at Ninject.Activation.Providers.StandardProvider.GetImplementationType(Type service) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 126\r\n   at Ninject.Activation.Providers.StandardProvider.Create(IContext context) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Providers\\StandardProvider.cs:line 77\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs:line 157\r\n   at Ninject.KernelBase.<>c__DisplayClass10.<Resolve>b__c(IBinding binding) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 386\r\n   at System.Linq.Enumerable.WhereSelectListIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.<CastIterator>d__b1`1.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at DependencyInjection.FeatureTests.GenericTests.ConstrainsForOpenGenerics(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 44"
      },
      "FactoryWithNoParameters": {
        "result": "concern",
        "comment": "Ninject supports this through Ninject.Extensions.Factory, but attempts to install it from NuGet clash with Castle version."
      },
      "FactoryWithParameter": {
        "result": "concern",
        "comment": "Ninject supports this through Ninject.Extensions.Factory, but attempts to install it from NuGet clash with Castle version."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "concern",
        "comment": "Ninject supports this through Ninject.Extensions.Factory, but attempts to install it from NuGet clash with Castle version."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.MissingMemberException: The lazily-initialized type does not have a public, parameterless constructor.\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 31"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "failure",
        "error": "Ninject.ActivationException: Error activating IService\r\nNo matching bindings are available, and the type is not self-bindable.\r\nActivation path:\r\n  2) Injection of dependency IService into property Service of type ServiceWithSimplePropertyDependency\r\n  1) Request for ServiceWithSimplePropertyDependency\r\n\r\nSuggestions:\r\n  1) Ensure that you have defined a binding for IService.\r\n  2) If the binding was defined in a module, ensure that the module has been loaded into the kernel.\r\n  3) Ensure you have not accidentally created more than one kernel.\r\n  4) If you are using constructor arguments, ensure that the parameter name matches the constructors parameter name.\r\n  5) If you are using automatic module loading, ensure the search path and filters are correct.\r\n\r\n   at Ninject.KernelBase.Resolve(IRequest request) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 359\r\n   at Ninject.Planning.Targets.Target`1.GetValue(Type service, IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 197\r\n   at Ninject.Planning.Targets.Target`1.ResolveWithin(IContext parent) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Planning\\Targets\\Target.cs:line 165\r\n   at Ninject.Activation.Strategies.PropertyInjectionStrategy.GetValue(IContext context, ITarget target) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Strategies\\PropertyInjectionStrategy.cs:line 123\r\n   at Ninject.Activation.Strategies.PropertyInjectionStrategy.Activate(IContext context, InstanceReference reference) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Strategies\\PropertyInjectionStrategy.cs:line 79\r\n   at Ninject.Activation.Pipeline.<>c__DisplayClass2.<Activate>b__0(IActivationStrategy s) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Pipeline.cs:line 58\r\n   at Ninject.Infrastructure.Language.ExtensionsForIEnumerableOfT.Map[T](IEnumerable`1 series, Action`1 action) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Infrastructure\\Language\\ExtensionsForIEnumerableOfT.cs:line 32\r\n   at Ninject.Activation.Pipeline.Activate(IContext context, InstanceReference reference) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Pipeline.cs:line 58\r\n   at Ninject.Activation.Context.Resolve() in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Activation\\Context.cs:line 182\r\n   at Ninject.KernelBase.<>c__DisplayClass10.<Resolve>b__c(IBinding binding) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\KernelBase.cs:line 386\r\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at Ninject.ResolutionExtensions.Get(IResolutionRoot root, Type service, IParameter[] parameters) in c:\\Projects\\Ninject\\ninject\\src\\Ninject\\Syntax\\ResolutionExtensions.cs:line 151\r\n   at DependencyInjection.FeatureTests.Adapters.NinjectAdapter.Resolve(Type serviceType) in [removed]\\NinjectAdapter.cs:line 32\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyIsOptional(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 42"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "failure",
        "error": "Xunit.Sdk.EmptyException: Assert.Empty() failure\r\n   at Xunit.Assert.Empty(IEnumerable collection)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyDoesNotNeedCustomAttribute(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 59"
      },
      "ReasonableConstructorSelection": {
        "result": "success"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "Simple Injector",
    "url": "http://simpleinjector.codeplex.com/",
    "version": "2.4.0.0",
    "supports": [
      "net40",
      "net40-Client",
      "net45",
      "net451",
      "win",
      "wp80",
      "sl40",
      "sl50"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "failure",
        "error": "SimpleInjector.ActivationException: The registered delegate for type ServiceWithListConstructorDependency<IService[]> threw an exception. The constructor of the type ServiceWithListConstructorDependency<IService[]> contains the parameter of type IService[] with name 'services' that is not registered. Please ensure IService[] is registered in the container, or change the constructor of ServiceWithListConstructorDependency<IService[]>. ---> SimpleInjector.ActivationException: The constructor of the type ServiceWithListConstructorDependency<IService[]> contains the parameter of type IService[] with name 'services' that is not registered. Please ensure IService[] is registered in the container, or change the constructor of ServiceWithListConstructorDependency<IService[]>.\r\n   at SimpleInjector.Advanced.DefaultConstructorInjectionBehavior.GetInstanceProducerFor(ParameterInfo parameter)\r\n   at SimpleInjector.Advanced.DefaultConstructorInjectionBehavior.BuildParameterExpression(ParameterInfo parameter)\r\n   at SimpleInjector.Registration.BuildParameterExpressionFor(ParameterInfo parameter)\r\n   at SimpleInjector.Registration.BuildConstructorParameters(ConstructorInfo constructor)\r\n   at SimpleInjector.Registration.BuildNewExpression(Type serviceType, Type implementationType)\r\n   at SimpleInjector.Registration.BuildTransientExpression[TService,TImplementation]()\r\n   at SimpleInjector.Lifestyles.TransientLifestyle.TransientLifestyleRegistration`2.BuildExpression()\r\n   at SimpleInjector.Registration.BuildExpression(InstanceProducer producer)\r\n   at SimpleInjector.InstanceProducer.BuildExpressionInternal()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at SimpleInjector.InstanceProducer.BuildInstanceCreator(Object& createdInstance)\r\n   at SimpleInjector.InstanceProducer.GetInstance()\r\n   --- End of inner exception stack trace ---\r\n   at SimpleInjector.InstanceProducer.GetInstance()\r\n   at SimpleInjector.Container.GetInstance(Type serviceType)\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.Resolve(Type serviceType) in [removed]\\SimpleInjectorAdapter.cs:line 33\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Array(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 36"
      },
      "List": {
        "result": "failure",
        "error": "SimpleInjector.ActivationException: The registered delegate for type ServiceWithListConstructorDependency<IList<IService>> threw an exception. The constructor of the type ServiceWithListConstructorDependency<IList<IService>> contains the parameter of type IList<IService> with name 'services' that is not registered. Please ensure IList<IService> is registered in the container, or change the constructor of ServiceWithListConstructorDependency<IList<IService>>. ---> SimpleInjector.ActivationException: The constructor of the type ServiceWithListConstructorDependency<IList<IService>> contains the parameter of type IList<IService> with name 'services' that is not registered. Please ensure IList<IService> is registered in the container, or change the constructor of ServiceWithListConstructorDependency<IList<IService>>.\r\n   at SimpleInjector.Advanced.DefaultConstructorInjectionBehavior.GetInstanceProducerFor(ParameterInfo parameter)\r\n   at SimpleInjector.Advanced.DefaultConstructorInjectionBehavior.BuildParameterExpression(ParameterInfo parameter)\r\n   at SimpleInjector.Registration.BuildParameterExpressionFor(ParameterInfo parameter)\r\n   at SimpleInjector.Registration.BuildConstructorParameters(ConstructorInfo constructor)\r\n   at SimpleInjector.Registration.BuildNewExpression(Type serviceType, Type implementationType)\r\n   at SimpleInjector.Registration.BuildTransientExpression[TService,TImplementation]()\r\n   at SimpleInjector.Lifestyles.TransientLifestyle.TransientLifestyleRegistration`2.BuildExpression()\r\n   at SimpleInjector.Registration.BuildExpression(InstanceProducer producer)\r\n   at SimpleInjector.InstanceProducer.BuildExpressionInternal()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at SimpleInjector.InstanceProducer.BuildInstanceCreator(Object& createdInstance)\r\n   at SimpleInjector.InstanceProducer.GetInstance()\r\n   --- End of inner exception stack trace ---\r\n   at SimpleInjector.InstanceProducer.GetInstance()\r\n   at SimpleInjector.Container.GetInstance(Type serviceType)\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.Resolve(Type serviceType) in [removed]\\SimpleInjectorAdapter.cs:line 33\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "SimpleInjector.ActivationException: The registered delegate for type ServiceWithListConstructorDependency<ICollection<IService>> threw an exception. The constructor of the type ServiceWithListConstructorDependency<ICollection<IService>> contains the parameter of type ICollection<IService> with name 'services' that is not registered. Please ensure ICollection<IService> is registered in the container, or change the constructor of ServiceWithListConstructorDependency<ICollection<IService>>. ---> SimpleInjector.ActivationException: The constructor of the type ServiceWithListConstructorDependency<ICollection<IService>> contains the parameter of type ICollection<IService> with name 'services' that is not registered. Please ensure ICollection<IService> is registered in the container, or change the constructor of ServiceWithListConstructorDependency<ICollection<IService>>.\r\n   at SimpleInjector.Advanced.DefaultConstructorInjectionBehavior.GetInstanceProducerFor(ParameterInfo parameter)\r\n   at SimpleInjector.Advanced.DefaultConstructorInjectionBehavior.BuildParameterExpression(ParameterInfo parameter)\r\n   at SimpleInjector.Registration.BuildParameterExpressionFor(ParameterInfo parameter)\r\n   at SimpleInjector.Registration.BuildConstructorParameters(ConstructorInfo constructor)\r\n   at SimpleInjector.Registration.BuildNewExpression(Type serviceType, Type implementationType)\r\n   at SimpleInjector.Registration.BuildTransientExpression[TService,TImplementation]()\r\n   at SimpleInjector.Lifestyles.TransientLifestyle.TransientLifestyleRegistration`2.BuildExpression()\r\n   at SimpleInjector.Registration.BuildExpression(InstanceProducer producer)\r\n   at SimpleInjector.InstanceProducer.BuildExpressionInternal()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at SimpleInjector.InstanceProducer.BuildInstanceCreator(Object& createdInstance)\r\n   at SimpleInjector.InstanceProducer.GetInstance()\r\n   --- End of inner exception stack trace ---\r\n   at SimpleInjector.InstanceProducer.GetInstance()\r\n   at SimpleInjector.Container.GetInstance(Type serviceType)\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.Resolve(Type serviceType) in [removed]\\SimpleInjectorAdapter.cs:line 33\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "success",
        "comment": "\r\n            Simple Injector does support resolving IEnumerable<T>, but requires a single registration \r\n            using one of the RegisterAll methods to register all types at once, which is a different\r\n            strategy than the other frameworks use.\r\n        "
      },
      "IReadOnlyCollection": {
        "result": "success"
      },
      "IReadOnlyList": {
        "result": "success"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "concern",
        "comment": "\r\n            Simple Injector does support filtering based on generic type constraints, but in case of \r\n            registering a collection of open generic types, it only allows all elements to be registered at \r\n            once. Open generic collections can be registered using RegisterAllOpenGeneric.\r\n            See: http://bit.ly/14DQx7c.\r\n        "
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "SimpleInjector.ActivationException: No registration for type Func<ServiceWithSimpleConstructorDependency> could be found and an implicit registration could not be made. The constructor of type Func<ServiceWithSimpleConstructorDependency> contains parameter 'method' of type IntPtr which can not be used for constructor injection because it is a value type.\r\n   at SimpleInjector.Container.ThrowNotConstructableException(Type concreteType)\r\n   at SimpleInjector.Container.ThrowMissingInstanceProducerException(Type serviceType)\r\n   at SimpleInjector.Container.GetInstanceFromProducer(InstanceProducer instanceProducer, Type serviceType)\r\n   at SimpleInjector.Container.GetInstanceForType(Type serviceType)\r\n   at SimpleInjector.Container.GetInstance(Type serviceType)\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.Resolve(Type serviceType) in [removed]\\SimpleInjectorAdapter.cs:line 33\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "SimpleInjector.ActivationException: No registration for type Lazy<ServiceWithSimpleConstructorDependency> could be found and an implicit registration could not be made. For the container to be able to create Lazy<ServiceWithSimpleConstructorDependency>, it should contain exactly one public constructor, but it has 6.\r\n   at SimpleInjector.Container.ThrowNotConstructableException(Type concreteType)\r\n   at SimpleInjector.Container.ThrowMissingInstanceProducerException(Type serviceType)\r\n   at SimpleInjector.Container.GetInstanceFromProducer(InstanceProducer instanceProducer, Type serviceType)\r\n   at SimpleInjector.Container.GetInstanceForType(Type serviceType)\r\n   at SimpleInjector.Container.GetInstance(Type serviceType)\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.Resolve(Type serviceType) in [removed]\\SimpleInjectorAdapter.cs:line 33\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "concern",
        "comment": "\r\n        Simple Injector does not inject properties out of the box, but this behavior \r\n        can be changed by replacing the Container.Options.PropertySelectionBehavior.\r\n        For more info see: https://bit.ly/1cmMxuS.\r\n    "
      },
      "PropertyDependencyIsOptional": {
        "result": "concern",
        "comment": "\r\n        Simple Injector does not inject properties out of the box, but this behavior \r\n        can be changed by replacing the Container.Options.PropertySelectionBehavior.\r\n        For more info see: https://bit.ly/1cmMxuS.\r\n    "
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "concern",
        "comment": "\r\n        Simple Injector does not inject properties out of the box, but this behavior \r\n        can be changed by replacing the Container.Options.PropertySelectionBehavior.\r\n        For more info see: https://bit.ly/1cmMxuS.\r\n    "
      },
      "ReasonableConstructorSelection": {
        "result": "concern",
        "comment": "\r\n            Simple Injector does not allow resolving types with multiple constructors out of the box, but this \r\n            behavior can be changed by replacing the Container.Options.ConstructorResolutionBehavior.\r\n            For more info see: https://bit.ly/13WKdRT.\r\n        "
      },
      "RegistrationAtAnyStage": {
        "result": "failure",
        "error": "System.InvalidOperationException: The container can't be changed after the first call to GetInstance, GetAllInstances and Verify.\r\n   at SimpleInjector.Container.ThrowWhenContainerIsLocked()\r\n   at SimpleInjector.Container.AddRegistration(Type serviceType, Registration registration)\r\n   at SimpleInjector.Container.Register(Type serviceType, Type implementationType, Lifestyle lifestyle, String serviceTypeParamName, String implementationTypeParamName)\r\n   at SimpleInjector.Container.Register(Type serviceType, Type implementationType, Lifestyle lifestyle)\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.Register(Type serviceType, Type implementationType, Lifestyle lifestyle) in [removed]\\SimpleInjectorAdapter.cs:line 47\r\n   at DependencyInjection.FeatureTests.Adapters.SimpleInjectorAdapter.RegisterTransient(Type serviceType, Type implementationType) in [removed]\\SimpleInjectorAdapter.cs:line 25\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.RegisterTransient[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 38\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Register[TService,TImplementation](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 14\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.RegistrationAtAnyStage(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 52"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "skipped",
        "comment": "Skipped as IService[] (List/array dependencies) is not supported by this framework."
      }
    }
  },
  {
    "name": "Spring.NET",
    "url": "http://www.springframework.net/",
    "version": "1.3.2.40943",
    "supports": [
      "net11",
      "net20",
      "net30",
      "net35",
      "net35-Client",
      "net40",
      "net40-Client",
      "net45",
      "net451"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "failure",
        "error": "Spring.Objects.Factory.UnsatisfiedDependencyException: Error creating object with name 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]])' : Unsatisfied dependency expressed through constructor argument with index 0 of type [System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]] : No unique object of type [System.Collections.Generic.IList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]] is defined : Unsatisfied dependency of type [System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]]: expected at least 1 matching object to wire the [services] parameter on the constructor of object [DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]])]\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 198\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 95\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(String name, RootObjectDefinition definition, ConstructorInfo[] ctors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 1133\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 996\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 930\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2065\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 1826\r\n   at Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\DefaultListableObjectFactory.cs:line 770\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1383\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1350\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "Spring.Objects.Factory.UnsatisfiedDependencyException: Error creating object with name 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]])' : Unsatisfied dependency expressed through constructor argument with index 0 of type [System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] : No unique object of type [System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]] is defined : Unsatisfied dependency of type [System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]]: expected at least 1 matching object to wire the [services] parameter on the constructor of object [DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]])]\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 198\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 95\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(String name, RootObjectDefinition definition, ConstructorInfo[] ctors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 1133\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 996\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 930\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2065\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 1826\r\n   at Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\DefaultListableObjectFactory.cs:line 770\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1383\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1350\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "Spring.Objects.Factory.UnsatisfiedDependencyException: Error creating object with name 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]])' : Unsatisfied dependency expressed through constructor argument with index 0 of type [System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]] : No unique object of type [System.Collections.Generic.IEnumerable`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]] is defined : Unsatisfied dependency of type [System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]]: expected at least 1 matching object to wire the [services] parameter on the constructor of object [DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]])]\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 198\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 95\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(String name, RootObjectDefinition definition, ConstructorInfo[] ctors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 1133\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 996\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 930\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2065\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 1826\r\n   at Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\DefaultListableObjectFactory.cs:line 770\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1383\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1350\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "Spring.Objects.Factory.UnsatisfiedDependencyException: Error creating object with name 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]])' : Unsatisfied dependency expressed through constructor argument with index 0 of type [System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] : No unique object of type [System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]] is defined : Unsatisfied dependency of type [System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]]: expected at least 1 matching object to wire the [services] parameter on the constructor of object [DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]])]\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 198\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 95\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(String name, RootObjectDefinition definition, ConstructorInfo[] ctors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 1133\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 996\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 930\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2065\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 1826\r\n   at Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\DefaultListableObjectFactory.cs:line 770\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1383\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1350\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "Spring.Objects.Factory.UnsatisfiedDependencyException: Error creating object with name 'DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]])' : Unsatisfied dependency expressed through constructor argument with index 0 of type [System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]] : No unique object of type [System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]] is defined : Unsatisfied dependency of type [System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]]: expected at least 1 matching object to wire the [services] parameter on the constructor of object [DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]] (DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]])]\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.GetConstructorInstantiationInfo(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 198\r\n   at Spring.Objects.Factory.Support.ConstructorResolver.AutowireConstructor(String objectName, RootObjectDefinition rod, ConstructorInfo[] chosenCtors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\ConstructorResolver.cs:line 95\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(String name, RootObjectDefinition definition, ConstructorInfo[] ctors, Object[] explicitArgs) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 1133\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObjectInstance(String objectName, RootObjectDefinition objectDefinition, Object[] arguments) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 996\r\n   at Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateObject(String name, RootObjectDefinition definition, Object[] arguments, Boolean allowEagerCaching, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractAutowireCapableObjectFactory.cs:line 930\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectInternal(String name, Type requiredType, Object[] arguments, Boolean suppressConfigure) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 2065\r\n   at Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(String name) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\AbstractObjectFactory.cs:line 1826\r\n   at Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Objects\\Factory\\Support\\DefaultListableObjectFactory.cs:line 770\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type, Boolean includePrototypes, Boolean includeFactoryObjects) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1383\r\n   at Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(Type type) in c:\\_prj\\spring-net\\trunk\\src\\Spring\\Spring.Core\\Context\\Support\\AbstractApplicationContext.cs:line 1350\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "failure",
        "error": "System.InvalidOperationException: Sequence contains no elements\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.GenericTests.OpenGenericTypes(IFrameworkAdapter framework) in [removed]\\3_GenericTests.cs:line 22"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "failure",
        "error": "System.InvalidOperationException: Sequence contains no elements\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithNoParameters(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 29"
      },
      "FactoryWithParameter": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "skipped",
        "comment": "Skipped as No parameters (Func<TService>) is not supported by this framework."
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "System.InvalidOperationException: Sequence contains no elements\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source)\r\n   at DependencyInjection.FeatureTests.Adapters.SpringAdapter.Resolve(Type serviceType) in [removed]\\SpringAdapter.cs:line 57\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "success"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "success"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nPosition: First difference is at position 0\r\nExpected: Most resolvable\r\nActual:   Default\r\n   at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n   at Xunit.Assert.Equal[T](T expected, T actual)\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 36"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "StructureMap",
    "url": "http://structuremap.net/structuremap/",
    "version": "2.6.4.0",
    "supports": [
      "net40",
      "net40-Client",
      "net45",
      "net451"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success"
      },
      "List": {
        "result": "success"
      },
      "Collection": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n   at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n   at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n   at lambda_method(Closure , IArguments )\r\n   at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\BuilderCompiler.cs:line 56\r\n   at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n   at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 237\r\n   at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n   at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 176\r\n   at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 36\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "success"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n   at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n   at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n   at lambda_method(Closure , IArguments )\r\n   at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\BuilderCompiler.cs:line 56\r\n   at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n   at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 237\r\n   at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n   at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 176\r\n   at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 36\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n   at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n   at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n   at lambda_method(Closure , IArguments )\r\n   at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\BuilderCompiler.cs:line 56\r\n   at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n   at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 237\r\n   at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n   at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 176\r\n   at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 36\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "success"
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily System.Func`2[[DependencyInjection.FeatureTests.TestTypes.IService2, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[DependencyInjection.FeatureTests.TestTypes.ServiceWithTwoConstructorDependencies, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithParameter(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 52"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily System.Lazy`1[[DependencyInjection.FeatureTests.TestTypes.ServiceWithSimpleConstructorDependency, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.LazyTests.BasicLazySupport(IFrameworkAdapter framework) in [removed]\\5_LazyTests.cs:line 28"
      },
      "NotCreatingLazyPrematurely": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "skipped",
        "comment": "Skipped as Basic support (Lazy<TService>) is not supported by this framework."
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n   at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n   at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n   at lambda_method(Closure , IArguments , ServiceWithSimplePropertyDependency )\r\n   at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass11.<buildUp>b__e(IArguments args, T target) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\BuilderCompiler.cs:line 103\r\n   at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\BuilderCompiler.cs:line 57\r\n   at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n   at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 237\r\n   at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n   at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 176\r\n   at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 36\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyIsOptional(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 42"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "failure",
        "error": "Xunit.Sdk.EmptyException: Assert.Empty() failure\r\n   at Xunit.Assert.Empty(IEnumerable collection)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyDoesNotNeedCustomAttribute(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 59"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "StructureMap.StructureMapException: StructureMap Exception Code:  202\nNo Default Instance defined for PluginFamily DependencyInjection.FeatureTests.TestTypes.IUnregisteredService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n   at StructureMap.BuildSession.<.ctor>b__0(Type t) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 33\r\n   at StructureMap.Util.Cache`2.get_Item(KEY key) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Util\\Cache.cs:line 83\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Pipeline.DefaultInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\DefaultInstance.cs:line 22\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ConstructorInstance.Get(String propertyName, Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 74\r\n   at StructureMap.Pipeline.ConstructorInstance.Get[T](String propertyName, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 79\r\n   at StructureMap.Pipeline.Arguments.Get[T](String propertyName) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Arguments.cs:line 18\r\n   at lambda_method(Closure , IArguments )\r\n   at StructureMap.Construction.BuilderCompiler.FuncCompiler`1.<>c__DisplayClass2.<CreateBuilder>b__0(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\BuilderCompiler.cs:line 56\r\n   at StructureMap.Construction.InstanceBuilder.BuildInstance(IArguments args) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Construction\\InstanceBuilder.cs:line 34\r\n   at StructureMap.Pipeline.ConstructorInstance.Build(Type pluginType, BuildSession session, IInstanceBuilder builder) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 237\r\n   at StructureMap.Pipeline.ConstructorInstance.build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ConstructorInstance.cs:line 218\r\n   at StructureMap.Pipeline.Instance.createRawObject(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 103\r\n   at StructureMap.Pipeline.Instance.Build(Type pluginType, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\Instance.cs:line 69\r\n   at StructureMap.Pipeline.ObjectBuilder.ConstructNew(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 39\r\n   at StructureMap.Pipeline.ObjectBuilder.Resolve(Type pluginType, Instance instance, BuildSession session) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Pipeline\\ObjectBuilder.cs:line 27\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType, Instance instance) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 176\r\n   at StructureMap.BuildSession.<>c__DisplayClass3.<.ctor>b__1() in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 36\r\n   at StructureMap.BuildSession.CreateInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\BuildSession.cs:line 215\r\n   at StructureMap.Container.GetInstance(Type pluginType) in c:\\BuildAgent\\work\\767273992e840853\\src\\StructureMap\\Container.cs:line 265\r\n   at DependencyInjection.FeatureTests.Adapters.StructureMapAdapter.Resolve(Type serviceType) in [removed]\\StructureMapAdapter.cs:line 45\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 33"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "success"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "success"
      }
    }
  },
  {
    "name": "Unity",
    "url": "http://msdn.microsoft.com/unity",
    "version": "3.0.0.0",
    "supports": [
      "net45",
      "net451",
      "win",
      "wp80"
    ],
    "features": {
      "IndependentService": {
        "result": "success"
      },
      "IndependentServiceRegisteredAsSelf": {
        "result": "success"
      },
      "SingletonLifetime": {
        "result": "success"
      },
      "TransientLifetime": {
        "result": "success"
      },
      "PrebuiltInstance": {
        "result": "success"
      },
      "ConstructorDependency": {
        "result": "success"
      },
      "ConstructorDependencyUsingInstance": {
        "result": "success"
      },
      "Array": {
        "result": "success",
        "comment": "Note: Unity requires named registrations for list resolution to work."
      },
      "List": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]]\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type IList`1 does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService]],(none)\r\n  Resolving parameter \"services\" of constructor DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] services)\r\n    Resolving System.Collections.Generic.IList`1[DependencyInjection.FeatureTests.TestTypes.IService],(none)\r\n ---> System.InvalidOperationException: The type IList`1 does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.List(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 42"
      },
      "Collection": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]]\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type ICollection`1 does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService]],(none)\r\n  Resolving parameter \"services\" of constructor DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.ICollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] services)\r\n    Resolving System.Collections.Generic.ICollection`1[DependencyInjection.FeatureTests.TestTypes.IService],(none)\r\n ---> System.InvalidOperationException: The type ICollection`1 does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Collection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 48"
      },
      "Enumerable": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]]\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type IEnumerable`1 does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService]],(none)\r\n  Resolving parameter \"services\" of constructor DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IEnumerable`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IEnumerable`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] services)\r\n    Resolving System.Collections.Generic.IEnumerable`1[DependencyInjection.FeatureTests.TestTypes.IService],(none)\r\n ---> System.InvalidOperationException: The type IEnumerable`1 does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.Enumerable(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 59"
      },
      "IReadOnlyCollection": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]]\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type IReadOnlyCollection`1 does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService]],(none)\r\n  Resolving parameter \"services\" of constructor DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IReadOnlyCollection`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] services)\r\n    Resolving System.Collections.Generic.IReadOnlyCollection`1[DependencyInjection.FeatureTests.TestTypes.IService],(none)\r\n ---> System.InvalidOperationException: The type IReadOnlyCollection`1 does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyCollection(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 65"
      },
      "IReadOnlyList": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]]\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type IReadOnlyList`1 does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService]],(none)\r\n  Resolving parameter \"services\" of constructor DependencyInjection.FeatureTests.TestTypes.ServiceWithListConstructorDependency`1[[System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Generic.IReadOnlyList`1[[DependencyInjection.FeatureTests.TestTypes.IService, DependencyInjection.FeatureTests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]] services)\r\n    Resolving System.Collections.Generic.IReadOnlyList`1[DependencyInjection.FeatureTests.TestTypes.IService],(none)\r\n ---> System.InvalidOperationException: The type IReadOnlyList`1 does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ListTests.AssertResolvesListDependencyFor[TTestComponent](IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 80\r\n   at DependencyInjection.FeatureTests.ListTests.IReadOnlyList(IFrameworkAdapter framework) in [removed]\\2_ListTests.cs:line 71"
      },
      "OpenGenericTypes": {
        "result": "success"
      },
      "ConstrainsForOpenGenerics": {
        "result": "skipped",
        "comment": "Skipped as IEnumerable<IService> (List/array dependencies) is not supported by this framework."
      },
      "FactoryWithNoParameters": {
        "result": "success"
      },
      "FactoryWithParameter": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"System.Func`2[DependencyInjection.FeatureTests.TestTypes.IService2,DependencyInjection.FeatureTests.TestTypes.ServiceWithTwoConstructorDependencies]\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: VerificationException - Operation could destabilize the runtime.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving System.Func`2[DependencyInjection.FeatureTests.TestTypes.IService2,DependencyInjection.FeatureTests.TestTypes.ServiceWithTwoConstructorDependencies],(none)\r\n ---> System.Security.VerificationException: Operation could destabilize the runtime.\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.FuncTests.FactoryWithParameter(IFrameworkAdapter framework) in [removed]\\4_FuncTests.cs:line 52"
      },
      "TransientFactoryUsedBySingletonStillCreatesTransient": {
        "result": "success"
      },
      "BasicLazySupport": {
        "result": "success"
      },
      "NotCreatingLazyPrematurely": {
        "result": "success"
      },
      "LazyanBeUsedToResolveCircularDepenendency": {
        "result": "success"
      },
      "PropertyDependency": {
        "result": "success"
      },
      "PropertyDependencyIsOptional": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithSimplePropertyDependency\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type IService does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithSimplePropertyDependency,(none)\r\n  Resolving value for property ServiceWithSimplePropertyDependency.Service\r\n    Resolving DependencyInjection.FeatureTests.TestTypes.IService,(none)\r\n ---> System.InvalidOperationException: The type IService does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyIsOptional(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 42"
      },
      "PropertyDependencyDoesNotNeedCustomAttribute": {
        "result": "failure",
        "error": "Xunit.Sdk.EmptyException: Assert.Empty() failure\r\n   at Xunit.Assert.Empty(IEnumerable collection)\r\n   at DependencyInjection.FeatureTests.PropertyTests.PropertyDependencyDoesNotNeedCustomAttribute(IFrameworkAdapter framework) in [removed]\\6_PropertyTests.cs:line 59"
      },
      "ReasonableConstructorSelection": {
        "result": "failure",
        "error": "Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"DependencyInjection.FeatureTests.TestTypes.ServiceWithMultipleConstructors\", name = \"(none)\".\r\nException occurred while: while resolving.\r\nException is: InvalidOperationException - The type IUnregisteredService does not have an accessible constructor.\r\n-----------------------------------------------\r\nAt the time of the exception, the container was:\r\n\r\n  Resolving DependencyInjection.FeatureTests.TestTypes.ServiceWithMultipleConstructors,(none)\r\n  Resolving parameter \"service2\" of constructor DependencyInjection.FeatureTests.TestTypes.ServiceWithMultipleConstructors(DependencyInjection.FeatureTests.TestTypes.IService service1, DependencyInjection.FeatureTests.TestTypes.IUnregisteredService service2)\r\n    Resolving DependencyInjection.FeatureTests.TestTypes.IUnregisteredService,(none)\r\n ---> System.InvalidOperationException: The type IUnregisteredService does not have an accessible constructor.\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodConstructorStrategy.ThrowForNullExistingObject(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuilderContext.NewBuildUp(NamedTypeBuildKey newBuildKey)\r\n   at Microsoft.Practices.Unity.ObjectBuilder.NamedTypeDependencyResolverPolicy.Resolve(IBuilderContext context)\r\n   at lambda_method(Closure , IBuilderContext )\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicBuildPlanGenerationContext.<>c__DisplayClass1.<GetBuildMethod>b__0(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name, IEnumerable`1 resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name, ResolverOverride[] resolverOverrides)\r\n   at Microsoft.Practices.Unity.UnityContainerExtensions.Resolve(IUnityContainer container, Type t, ResolverOverride[] overrides)\r\n   at DependencyInjection.FeatureTests.Adapters.UnityAdapter.Resolve(Type serviceType) in [removed]\\UnityAdapter.cs:line 40\r\n   at DependencyInjection.FeatureTests.Adapters.FrameworkAdapterExtensions.Resolve[TService](IFrameworkAdapter container) in [removed]\\FrameworkAdapterExtensions.cs:line 50\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.ReasonableConstructorSelection(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 33"
      },
      "RegistrationAtAnyStage": {
        "result": "success"
      },
      "GracefulRecursionHandling": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: Unity fails recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 116\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandling(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 69"
      },
      "GracefulRecursionHandlingForListDependency": {
        "result": "failure",
        "error": "Xunit.Sdk.AssertException: Unity fails recursion for now, and we have no way to retest it in each run (without process crash).\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 116\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.AssertIsNotCrashingOnListRecursion(IFrameworkAdapter adapter) in [removed]\\9_ConvenienceTests.cs:line 102\r\n   at DependencyInjection.FeatureTests.ConvenienceTests.GracefulRecursionHandlingForListDependency(IFrameworkAdapter framework) in [removed]\\9_ConvenienceTests.cs:line 81"
      }
    }
  }
]